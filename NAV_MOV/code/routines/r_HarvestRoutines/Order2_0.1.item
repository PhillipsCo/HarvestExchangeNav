package routines;
import java.io.File;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;

import com.movilitas.builder.MovilizerRequestBuilder;
import com.movilitas.jaxbframework.dataaccess.jaxb.impl.JaxbDAOMovilizerImpl;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerAttributeEntry;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerGenericDataContainer;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerGenericDataContainerEntry;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMasterdataAttributeUpdate;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMasterdataPoolUpdate;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMasterdataUpdate;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerRequest;

import java.beans.Introspector;



import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.PropertyUtils;
import org.jibx.ws.WsException;
import org.jibx.ws.soap.client.SoapClient;

import com.movilitas.builder.MovilizerRequestBuilder;
import com.movilitas.jaxbframework.MovilizerJaxbException;
import com.movilitas.jaxbframework.dataaccess.jaxb.impl.JaxbDAOMovilizerImpl;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerAttributeEntry;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerGenericDataContainer;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerGenericDataContainerEntry;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMasterdataAck;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMasterdataAttributeUpdate;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMasterdataPoolUpdate;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMasterdataUpdate;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerRequest;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerResponse;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerUploadDataContainer;
import com.movilitas.sync.SyncConstants;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MoveletType;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerAnswer;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMovelet;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMoveletSet;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerParticipant;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MoveletConstants;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerQuestion;
import java.io.PrintWriter;
public class Order2 {

    
	public static int SYSTEM_ID = 51840021;
	public static String SYSTEM_PASSWORD = "peterson";
	public static JaxbDAOMovilizerImpl jaxbDAO ;
	public static MovilizerGenericDataContainer data;
	public static MovilizerGenericDataContainer attributeData;
	public static MovilizerRequest movilizerRequest = createMovilizerRequestObject();
	public static MovilizerRequestBuilder requestBuilder = createMovilizerRequestBuilderObject();
	public static MovilizerMasterdataPoolUpdate masterdataPoolUpdate= createMovilizerMasterdataPoolUpdateObject();
	public static MovilizerMasterdataAttributeUpdate masterdataAttributeUpdate= createMovilizerMasterdataAttributeUpdateObject();
	public static MovilizerMasterdataUpdate masterdataUpdate;
	public static MovilizerAttributeEntry attributeUpdate;
	public static MovilizerGenericDataContainerEntry parentOuter;	
	public static java.util.HashMap hmcount = new java.util.HashMap();
	public static java.util.HashMap hmITM = new java.util.HashMap();
	
	


	





public static boolean Boolean_Convert_String(String Value){

	 if (Value == null || Value.isEmpty() || Value.equalsIgnoreCase("N"))
		 return false;
	 else
		 return true;
		
	}

	public static boolean Boolean_Convert_Integer(Integer Value){
		if (Value == null || Value ==0 )
			 return false;
		 else
			 return true;
		
		
	}

	public static String generateErrorCode(String errorMessage) {
	    	
	    	String errorCode = "";
	    		if (errorMessage == null)
	    			errorCode = "0";
	    		else
	    			errorMessage = errorMessage.toLowerCase();
	    		
	    		if (errorMessage.contains("connection"))
	    			errorCode = "399";
	    		
	    		else if (errorMessage.contains("sql"))
	    			errorCode = "299";
	    		else
	    		if (errorMessage.contains("exceed max length"))
					
					errorCode="599";
	    		else
	    			if (errorMessage.contains("java"))
	        			errorCode = "199";
	    			else errorCode = "499";
	    		 
	    	return errorCode;
	}
		public static void createAllObjects() throws MovilizerJaxbException {
		//	movilizerRequest = createMovilizerRequestObject();
		//	requestBuilder = createMovilizerRequestBuilderObject();
		//	masterdataPoolUpdate = createMovilizerMasterdataPoolUpdateObject();
			masterdataUpdate = createMovilizerMasterdataUpdateObject();
			masterdataAttributeUpdate = createMovilizerMasterdataAttributeUpdateObject();
			attributeUpdate= createMovilizerAttributeEntryObject();
			data = createMovilizerGenericDataContainerObject();
			attributeData=createMovilizerGenericDataContainerObject();
			jaxbDAO = new JaxbDAOMovilizerImpl();
			
		}
		public static void createAllObjects_NotData() throws MovilizerJaxbException {
			//	movilizerRequest = createMovilizerRequestObject();
			//	requestBuilder = createMovilizerRequestBuilderObject();
			//	masterdataPoolUpdate = createMovilizerMasterdataPoolUpdateObject();
			masterdataAttributeUpdate = createMovilizerMasterdataAttributeUpdateObject();
				masterdataUpdate = createMovilizerMasterdataUpdateObject();
//				data = createMovilizerGenericDataContainerObject();
				jaxbDAO = new JaxbDAOMovilizerImpl();
				attributeUpdate= createMovilizerAttributeEntryObject();
				attributeData=createMovilizerGenericDataContainerObject();
				
			}

		
		

		public static void populateMasterdataPoolUpdate(Object rowLink)
				throws MovilizerJaxbException, IllegalArgumentException,
				IllegalAccessException, InvocationTargetException,
				NoSuchMethodException {

			String entryName = "";
			String valstr = "";
			String columnName = null;
			Object objValue;

			movilizerRequest.setSynchronousResponse(true);
			movilizerRequest.setNumResponses(new Integer(100));

			for (java.lang.reflect.Field field : rowLink.getClass()
					.getDeclaredFields()) {
				columnName = field.getName();

				if (!(columnName.contains("j_portal_MD")))

				{

					objValue = field.get(rowLink);

					entryName = columnName;

					if (objValue == null)
						objValue = "";

					valstr = objValue.toString();
					// System.out.println(entryName +"-"+valstr);

					if (columnName.equalsIgnoreCase("SystemId")
							|| columnName.equalsIgnoreCase("SystemPassword")) {

						BeanUtils.setProperty(movilizerRequest,
								uncapitalize(entryName), objValue);

						// System.out.println("---"+BeanUtils.getProperty(movilizerRequest,uncapitalize(entryName)));

					} else if (columnName.equalsIgnoreCase("Pool")) {
						BeanUtils.setProperty(masterdataPoolUpdate,
								uncapitalize(entryName), objValue);
						// System.out.println("---"+BeanUtils.getProperty(masterdataPoolUpdate,uncapitalize(entryName)));
					}

					

				}

			}
			
			rowLink = null;

		}
		
		

		public static void populateMasterdataUpdate(Object rowLink)
				throws MovilizerJaxbException, IllegalArgumentException,
				IllegalAccessException, InvocationTargetException,
				NoSuchMethodException {

			String entryName = "";
			String valstr = "";
			String columnName = null;
			Object objValue;

			

			for (java.lang.reflect.Field field : rowLink.getClass()
					.getDeclaredFields()) {
				columnName = field.getName();

				if (!(columnName.contains("j_portal_MD")))

				{

					objValue = field.get(rowLink);

					entryName = columnName;

					if (objValue == null)
						objValue = "";

					valstr = objValue.toString();
					// System.out.println(entryName +"-"+valstr);

					
						BeanUtils.setProperty(masterdataUpdate,
								uncapitalize(entryName), objValue);
						// System.out.println("---"+BeanUtils.getProperty(masterdataUpdate,uncapitalize(entryName)));
					

				}

			}

			rowLink = null;

		}
		
		
		
		
		

		public static String uncapitalize(String string) {
			return Character.toLowerCase(string.charAt(0)) + string.substring(1);
		}
		public static void populateDataContainerEntry(Object rowLink)
				throws IllegalArgumentException, IllegalAccessException {

			String entryName = "";
			String valstr = "";
			String outerName = "";
			Object objValue;

			MovilizerGenericDataContainerEntry outer = new MovilizerGenericDataContainerEntry();
			MovilizerGenericDataContainerEntry inner;
			// data = createMovilizerGenericDataContainerObject();
			
			outerName = rowLink.getClass().getSimpleName().replace("Struct", "");
		// System.out.println(outerName);
			outer.setName(outerName);
			
			String columnName = null;
			for (java.lang.reflect.Field field : rowLink.getClass().getDeclaredFields()) {
				columnName = field.getName();
				//System.out.println(columnName);

				if (!(columnName.contains("j_portal_MD")))

				{

					objValue = field.get(rowLink);
					entryName = columnName;

					if (objValue == null)
						objValue = "";

					valstr = objValue.toString();
				
					inner = new MovilizerGenericDataContainerEntry();
					inner.setName(entryName);
					inner.setValstr(valstr);
					outer.addEntry(inner);
					//data.addEntry(outer);
					//System.out.println(outer.getName()+":- "+entryName+", "+valstr);
					
				}
				
			}
			data.addEntry(outer);
			
			if(parentOuter != null){
					data.addEntry(parentOuter);
				}

			//parentOuter = null;
			//System.out.println(data.getEntryList());
			
			rowLink = null;
			inner = null;
			outer = null;
			
		}
		public static void populateDataContainerEntryLoop(Object rowLink)
				throws IllegalArgumentException, IllegalAccessException {

			String entryName = "";
			String valstr = "";
			String outerName = "";
			Object objValue;
			MovilizerGenericDataContainerEntry itm = new MovilizerGenericDataContainerEntry();;
			MovilizerGenericDataContainerEntry outer;
			MovilizerGenericDataContainerEntry inner;
			// data = createMovilizerGenericDataContainerObject();

			outerName = rowLink.getClass().getSimpleName().replace("Struct", "");
			// System.out.println(outerName);
			itm.setName(outerName);
			//for(int i=1; i<=14;i++)
			//{
			
			
			
			String columnName = null;
			for (java.lang.reflect.Field field : rowLink.getClass()
					.getDeclaredFields()) {
				columnName = field.getName();
//				System.out.println(columnName);
				

				if (!(columnName.contains("j_portal_MD")))

				{
					
					objValue = field.get(rowLink);
					//System.out.println("Value  : " + objValue.toString() + " END");
					String[] orders = objValue.toString().split("\\|");
					
					for(int x = 0; x < orders.length; x++){
						outer = new MovilizerGenericDataContainerEntry();
						//System.out.println("Order  : " + orders[x]);
						String[] lbl = {"ITM","UOM","MATNO","QTYPERM","QTYORDER"};
						String[] orderItems = orders[x].split("_");
						String matnoVal = String.format("%012d",Integer.valueOf(orderItems[0]));
						String itmVal = "00_" + matnoVal + "_0" ;
						String uomVal = "0";
						String[] lblitems = {itmVal,uomVal,matnoVal,orderItems[1].toString(),orderItems[2].toString()};
						for(int z =0; z<5;z++){
							if(lbl[z].equalsIgnoreCase("ITM"))
								outer.setName(lblitems[z]);
							else {
								entryName = lbl[z];
								valstr = lblitems[z];
								inner = new MovilizerGenericDataContainerEntry();
								inner.setName(entryName);
								inner.setValstr(valstr);
								outer.addEntry(inner);
								
							}
						}
						itm.addEntry(outer);
					}
					data.addEntry(itm);
					if(parentOuter != null)
					data.addEntry(parentOuter);
				
				}
				//data.addEntry(outer);
			}

			
			
			
			
			//}
			
			
			
			//parentOuter = null;
			
			data.getEntryList();
			
			
			
			rowLink = null;
			inner = null;
			outer = null;
			
		
		}
		
		public static void populateDataContainerInnerEntry(Object rowLink)
				throws IllegalArgumentException, IllegalAccessException {

			String entryName = "";
			String valstr = "";
			
			Object objValue;

		
			MovilizerGenericDataContainerEntry inner;
			// data = createMovilizerGenericDataContainerObject();

			String columnName = null;
			for (java.lang.reflect.Field field : rowLink.getClass()
					.getDeclaredFields()) {
				columnName = field.getName();
//				System.out.println(columnName);

				if (!(columnName.contains("j_portal_MD")))

				{

					objValue = field.get(rowLink);
					entryName = columnName;

					if (objValue == null)
						objValue = "";

					valstr = objValue.toString();

					inner = new MovilizerGenericDataContainerEntry();
					inner.setName(entryName);
					inner.setValstr(valstr);
					data.addEntry(inner);
				}

			}

			
			
			
			
			
			
			
			data.getEntryList();
			
			rowLink = null;
			inner = null;
			
		
		}

			
		
		
			
		public static void populateUpdateContainerEntry()
		{
			masterdataUpdate.setData(data);

			masterdataPoolUpdate.addUpdate(masterdataUpdate);
		}
		
		public static void populateUpdateContainerEntryBalFwd()
		{
			
			data.clearEntryList();
			masterdataUpdate.setData(data);
			
			masterdataPoolUpdate.addUpdate(masterdataUpdate);
		}

		public static String sendMasterData(String movilizerURL, int movilizerVersion,int fileNo,String directory) throws MovilizerJaxbException,
				IOException, WsException {

			String responseXML = "";
			//System.out.println(masterdataPoolUpdate.getPool());
			movilizerRequest.addMasterdataPoolUpdate(masterdataPoolUpdate);
			
			MovilizerRequest request = (MovilizerRequest) requestBuilder
					.getRequestObject();

		//System.out.println(jaxbDAO.generateXML(request));
			PrintWriter writer;
			SoapClient soapClient = jaxbDAO.createWebServiceDispatcher(
					movilizerURL, movilizerVersion);  // UAT url
					 // "https://demo.movilizer.com/mds/WebService/", 14);    // demo url
			MovilizerResponse response = (MovilizerResponse) soapClient
					.call(request);
			responseXML =jaxbDAO.generateXML(response);
			//System.out.println(responseXML);
			//final long currentTime = System.currentTimeMillis();
			//final File file = new File(directory + "\\Responses\\" + response.getRequestAcknowledgeKey()+ "_" + currentTime + "-" + fileNo + ".xml"); 
		//	if (!file.exists())
          //  {
          //      try
         //       {
                    //write the container to the file
                	
           //         if (file.createNewFile())
           //         {
            //            writer = new PrintWriter(file);
            //            writer.write(jaxbDAO.generateXML(response));
           //             writer.close();
            //        }
           //         
                    //System.out.println("Wrote container");
              //  }
             //   catch (final IOException e)
             //   {
             //       e.printStackTrace();
                    //ackKey = null;
             //   }
             //   catch (final MovilizerJaxbException e)
              //  {
                //    e.printStackTrace();
                    //ackKey = null;
               // }
           // }
			movilizerRequest=null;
			requestBuilder=null;
			masterdataPoolUpdate=null;
			masterdataAttributeUpdate = null;
			
			movilizerRequest = createMovilizerRequestObject();
			requestBuilder = createMovilizerRequestBuilderObject();
			masterdataPoolUpdate= createMovilizerMasterdataPoolUpdateObject();
			masterdataAttributeUpdate = createMovilizerMasterdataAttributeUpdateObject();
			return responseXML;
			
			

		}
		
		

		public static void linkNamePrint(Object outC)

		{
			//System.out.println(outC);
		}
		
		public static MovilizerGenericDataContainerEntry createMovilizerGenericDataContainerEntry() {
			
			MovilizerGenericDataContainerEntry parentOuter = new MovilizerGenericDataContainerEntry();
			
			return parentOuter;
		}

		public static MovilizerGenericDataContainer createMovilizerGenericDataContainerObject()

		{

			MovilizerGenericDataContainer data = new MovilizerGenericDataContainer();

			return data;

		}
		

		public static MovilizerGenericDataContainerEntry createMovilizerGenericDataContainerEntryObject()

		{

			MovilizerGenericDataContainerEntry entry = new MovilizerGenericDataContainerEntry();

			return entry;

		}

		public static MovilizerRequest createMovilizerRequestObject()

		{

			MovilizerRequest movilizerRequest = new MovilizerRequest();

			return movilizerRequest;
		}

		public static MovilizerRequestBuilder createMovilizerRequestBuilderObject()

		{
			MovilizerRequestBuilder requestBuilder = new MovilizerRequestBuilder(
					movilizerRequest);

			return requestBuilder;
		}

		public static MovilizerMasterdataPoolUpdate createMovilizerMasterdataPoolUpdateObject()

		{
			MovilizerMasterdataPoolUpdate masterdataPoolUpdate = new MovilizerMasterdataPoolUpdate();

			return masterdataPoolUpdate;
		}
		
		private static MovilizerMasterdataAttributeUpdate createMovilizerMasterdataAttributeUpdateObject() {
			MovilizerMasterdataAttributeUpdate masterdataAttributeUpdate = new MovilizerMasterdataAttributeUpdate();

			return masterdataAttributeUpdate;
			
		}

		public static MovilizerMasterdataUpdate createMovilizerMasterdataUpdateObject()

		{

			MovilizerMasterdataUpdate masterdataUpdate = new MovilizerMasterdataUpdate();

			return masterdataUpdate;
		}
		public static MovilizerAttributeEntry createMovilizerAttributeEntryObject(){
			MovilizerAttributeEntry attributeUpdate = new MovilizerAttributeEntry();
			return attributeUpdate;
		}

		public static void extractMetaColumns(Object rowLink) {

			String entryName = "";
			String valstr = "";
			String outerName = "";

			MovilizerGenericDataContainerEntry outer = new MovilizerGenericDataContainerEntry();
			MovilizerGenericDataContainerEntry inner = new MovilizerGenericDataContainerEntry();
			// data = createMovilizerGenericDataContainerObject();

			outerName = rowLink.getClass().getSimpleName().replace("Struct", "");
			// System.out.println(outerName);
			outer.setName(outerName);

			String columnName = null;
			for (java.lang.reflect.Field field : rowLink.getClass()
					.getDeclaredFields()) {
				columnName = field.getName().toLowerCase();
				Object objValue;
				try {
					objValue = field.get(rowLink);

					if (!(columnName.contains("j_portal_MD")))

					{

						entryName = columnName;

						if (objValue == null)
							objValue = "";

						valstr = objValue.toString();

						inner.setName(entryName);
						inner.setValstr(valstr);
						outer.addEntry(inner);
					}

				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					// e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					// e.printStackTrace();
				}
			}

			data.addEntry(outer);
			data.getEntryList();

		}

		public static void resetObjects()

		{

			
			//masterdataPoolUpdate = null;
			masterdataUpdate = null;
			data = null;
			jaxbDAO = null;
			parentOuter = null;
			attributeUpdate=null;
			attributeData = null;
		}
		public static void resetObjects_NotData()

		{

			
			//masterdataPoolUpdate = null;
			masterdataUpdate = null;
//			data = null;
			jaxbDAO = null;
			parentOuter = null;
			attributeUpdate=null;
			attributeData = null;
		}	
		




}
