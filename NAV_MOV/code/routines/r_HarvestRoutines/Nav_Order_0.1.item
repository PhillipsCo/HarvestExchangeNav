package routines;

import java.beans.Introspector;



import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.*;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.PropertyUtils;
import org.jibx.ws.WsException;
import org.jibx.ws.soap.client.SoapClient;

import com.movilitas.builder.MovilizerRequestBuilder;
import com.movilitas.jaxbframework.MovilizerJaxbException;
import com.movilitas.jaxbframework.dataaccess.jaxb.impl.JaxbDAOMovilizerImpl;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerAttributeEntry;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerGenericDataContainer;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerGenericDataContainerEntry;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMasterdataAck;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMasterdataAttributeUpdate;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMasterdataPoolUpdate;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMasterdataUpdate;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerRequest;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerResponse;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerUploadDataContainer;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class Nav_Order {

	public static int SYSTEM_ID = 51840021;
	public static String SYSTEM_PASSWORD = "peterson";
	public static JaxbDAOMovilizerImpl jaxbDAO ;
	public static MovilizerGenericDataContainer data;
	public static MovilizerGenericDataContainer attributeData;
	public static MovilizerGenericDataContainer previous_data;
	public static MovilizerRequest movilizerRequest = createMovilizerRequestObject();
	public static MovilizerRequestBuilder requestBuilder = createMovilizerRequestBuilderObject();
	public static MovilizerMasterdataPoolUpdate masterdataPoolUpdate= createMovilizerMasterdataPoolUpdateObject();
	public static MovilizerMasterdataAttributeUpdate masterdataAttributeUpdate= createMovilizerMasterdataAttributeUpdateObject();
	public static MovilizerMasterdataUpdate masterdataUpdate;
	public static MovilizerAttributeEntry attributeUpdate;
	public static MovilizerGenericDataContainerEntry parentOuter;
	public static java.util.HashMap hmITM = new java.util.HashMap();
	public static java.util.HashMap hmRTEcount = new java.util.HashMap();
	public static List<String> coDate = new ArrayList<String>();
	public static List<String> returnObjects = new ArrayList<String>();

	
	
public static String generateErrorCode(String errorMessage) {
    	
    	String errorCode = "";
    		if (errorMessage == null)
    			errorCode = "0";
    		else
    			errorMessage = errorMessage.toLowerCase();
    		
    		if (errorMessage.contains("connection"))
    			errorCode = "399";
    		
    		else if (errorMessage.contains("sql"))
    			errorCode = "299";
    		else
    		if (errorMessage.contains("exceed max length"))
				
				errorCode="599";
    		else
    			if (errorMessage.contains("java"))
        			errorCode = "199";
    			else errorCode = "499";
    		 
    	return errorCode;
}
	public static void createAllObjects() throws MovilizerJaxbException {
	//	movilizerRequest = createMovilizerRequestObject();
	//	requestBuilder = createMovilizerRequestBuilderObject();
	//	masterdataPoolUpdate = createMovilizerMasterdataPoolUpdateObject();
		masterdataUpdate = createMovilizerMasterdataUpdateObject();
		//masterdataAttributeUpdate = createMovilizerMasterdataAttributeUpdateObject();
		attributeUpdate= createMovilizerAttributeEntryObject();
		data = createMovilizerGenericDataContainerObject();
		attributeData=createMovilizerGenericDataContainerObject();
		jaxbDAO = new JaxbDAOMovilizerImpl();

		
	}

	public static int getRTEcount(String s){
		int val =1;
		if(!hmRTEcount.containsKey(s)){
			hmRTEcount.put(s, 1);
		}else{
			hmRTEcount.put(s,1+Integer.parseInt(hmRTEcount.get(s).toString()));
		}
		return val;
	}
	
	public static int getRTEcountValue(String s){
		//System.out.print(s + "HERE");
		return Integer.parseInt(hmRTEcount.get(s).toString());
	}
	

	public static void populateMasterdataPoolUpdate(Object rowLink)
			throws MovilizerJaxbException, IllegalArgumentException,
			IllegalAccessException, InvocationTargetException,
			NoSuchMethodException {

		String entryName = "";
		String valstr = "";
		String columnName = null;
		Object objValue;

		movilizerRequest.setSynchronousResponse(true);
		movilizerRequest.setNumResponses(new Integer(1000));
		movilizerRequest.setUseAutoAcknowledge(true);

		for (java.lang.reflect.Field field : rowLink.getClass()
				.getDeclaredFields()) {
			columnName = field.getName();

			if (!(columnName.contains("NavExport_Order")||columnName.contains("NavExport_010")))

			{

				objValue = field.get(rowLink);

				entryName = columnName;

				if (objValue == null)
					objValue = "";

				valstr = objValue.toString();
				// System.out.println(entryName +"-"+valstr);

				if (columnName.equalsIgnoreCase("SystemId")
						|| columnName.equalsIgnoreCase("SystemPassword")) {

					BeanUtils.setProperty(movilizerRequest,
							uncapitalize(entryName), objValue);

					// System.out.println("---"+BeanUtils.getProperty(movilizerRequest,uncapitalize(entryName)));

				} else if (columnName.equalsIgnoreCase("Pool")) {
					BeanUtils.setProperty(masterdataPoolUpdate,
							uncapitalize(entryName), objValue);
					// System.out.println("---"+BeanUtils.getProperty(masterdataPoolUpdate,uncapitalize(entryName)));
				}

				

			}

		}

		rowLink = null;

	}
	
	

	
	public static void populateMasterdataUpdate(Object rowLink)
			throws MovilizerJaxbException, IllegalArgumentException,
			IllegalAccessException, InvocationTargetException,
			NoSuchMethodException {

		String entryName = "";
		String valstr = "";
		String columnName = null;
		Object objValue;

		
		for (java.lang.reflect.Field field : rowLink.getClass()
				.getDeclaredFields()) {
			columnName = field.getName();
			

			if (!(columnName.contains("NavExport_Order")||columnName.contains("NavExport_010")))

			{

				objValue = field.get(rowLink);

				entryName = columnName;

				if (objValue == null)
					objValue = "";

				valstr = objValue.toString();
				 //System.out.println(entryName +"-"+valstr);
					
					
					BeanUtils.setProperty(masterdataUpdate,
							uncapitalize(entryName), objValue);
					 //System.out.println("---"+BeanUtils.getProperty(masterdataUpdate,uncapitalize(entryName)));
				
			}		
			}
		rowLink = null;

	}

	

	
	public static String uncapitalize(String string) {
		return Character.toLowerCase(string.charAt(0)) + string.substring(1);
	}


	
	
	

	
	public static void populateDataContainerEntryChildNode(Object rowLink)
			throws IllegalArgumentException, IllegalAccessException {

		String entryName = "";
		String valstr = "";
		String outerName = "";
		//String outerName1 = "";
		Object objValue;
		
		
		MovilizerGenericDataContainerEntry outer = new MovilizerGenericDataContainerEntry();
		//MovilizerGenericDataContainerEntry outer1 = new MovilizerGenericDataContainerEntry();
	
		MovilizerGenericDataContainerEntry inner;
		// data = createMovilizerGenericDataContainerObject();

		outerName = rowLink.getClass().getSimpleName().replace("Struct", "");
		//outerName1 = outerName+"1";
//		 System.out.println("OuterName : " + outerName + " END");
		if(parentOuter != null){
		//	System.out.println("ParentOuter : " + parentOuter.getName() + " END");
		}
		if(parentOuter == null || !parentOuter.getName().equalsIgnoreCase(outerName)) {
			parentOuter = createMovilizerGenericDataContainerEntry();
			parentOuter.setName(outerName);
		}

		String columnName = null;
		for (java.lang.reflect.Field field : rowLink.getClass().getDeclaredFields()) {
			columnName = field.getName();

			if (!(columnName.contains("NavExport_Order")||columnName.contains("NavExport_010"))) {
				
				objValue = field.get(rowLink);
				
				if(columnName.equalsIgnoreCase(outerName))
					outer.setName(objValue.toString());
				else {
						
						//if(columnName.equalsIgnoreCase(outerName1)) {
						//	outer1.setName(objValue.toString());
						//} else {
							entryName = columnName;
							if (objValue == null)
								objValue = "";
							valstr = objValue.toString();
							inner = new MovilizerGenericDataContainerEntry();
							inner.setName(entryName);
							inner.setValstr(valstr);
							outer.addEntry(inner);
							//System.out.println(parentOuter.getName()+":- "+outer.getName()+":   "+entryName+"  in code "+valstr);
								
						//}
				}
			}
			
		}
		if(hmITM.get(outer.getName().toString())== null)
		{
			hmITM.put(outer.getName().toString(), outer);
//			System.out.println("Unique Date = "+outer.getName().toString()+" "+hmITM.size());
			//outer.addEntry(outer1);
			parentOuter.addEntry(outer);
		}
		else{
			outer = (MovilizerGenericDataContainerEntry)hmITM.get(outer.getName().toString());
//			System.out.println("Not Unique Date = "+outer.getName().toString());
			//outer.addEntry(outer1);
		}
		
		rowLink = null;
		inner = null;
		outer = null;
		//outer1 = null;
	}
	
	
	
	
	public static void populateDataContainerEntry(Object rowLink)
			throws IllegalArgumentException, IllegalAccessException {

		String entryName = "";
		String valstr = "";
		String outerName = "";
		Object objValue;

		MovilizerGenericDataContainerEntry outer = new MovilizerGenericDataContainerEntry();
		MovilizerGenericDataContainerEntry inner;
		// data = createMovilizerGenericDataContainerObject();
		
		outerName = rowLink.getClass().getSimpleName().replace("Struct", "");
	// System.out.println(outerName);
		outer.setName(outerName);
		
		String columnName = null;
		for (java.lang.reflect.Field field : rowLink.getClass().getDeclaredFields()) {
			columnName = field.getName();
			//System.out.println(columnName);

			if (!(columnName.contains("NavExport_Order")||columnName.contains("NavExport_010")))

			{

				objValue = field.get(rowLink);
				entryName = columnName;

				if (objValue == null)
					objValue = "";

				valstr = objValue.toString();
			
				inner = new MovilizerGenericDataContainerEntry();
				inner.setName(entryName);
				inner.setValstr(valstr);
				outer.addEntry(inner);
				//data.addEntry(outer);
				//System.out.println(outer.getName()+":- "+entryName+", "+valstr);
				
			}
			
		}
		data.addEntry(outer);
		
		if(parentOuter != null){
				data.addEntry(parentOuter);
			}

		parentOuter = null;
		//System.out.println(data.getEntryList());
		
		rowLink = null;
		inner = null;
		outer = null;
		
	}
	
		
	public static void populateUpdateContainerEntry()
	{
		masterdataUpdate.setData(data);
		//System.out.println("data:-  "+data.getEntry(0));

		masterdataPoolUpdate.addUpdate(masterdataUpdate);
	}
	public static void populateAttributeUpdateContainerEntry()
	{
	movilizerRequest.addMasterdataAttributeUpdate(masterdataAttributeUpdate);
	}	
	

	public static String createRequestMasterData(String movilizerURL,int movilizerVersion) throws MovilizerJaxbException,
			IOException, WsException {

		String requestXML = "";
		String responseXML = "";

		movilizerRequest.addMasterdataPoolUpdate(masterdataPoolUpdate);
		
		MovilizerRequest request = (MovilizerRequest) requestBuilder
				.getRequestObject();

		requestXML = jaxbDAO.generateXML(request);
		
		//System.out.println(requestXML);

		movilizerRequest=null;
		requestBuilder=null;
		masterdataPoolUpdate=null;
		masterdataAttributeUpdate=null;
		movilizerRequest = createMovilizerRequestObject();
		requestBuilder = createMovilizerRequestBuilderObject();
		masterdataPoolUpdate= createMovilizerMasterdataPoolUpdateObject();
		masterdataAttributeUpdate= createMovilizerMasterdataAttributeUpdateObject();
		
		return requestXML;
		
	}
	
	public static List<String> sendMasterData(String movilizerURL,int movilizerVersion, String request) throws MovilizerJaxbException,
	IOException, WsException {
		
		String responseXML = "";
		String errorResponse="";
		String ackResponse="";
		returnObjects.clear();
		
		//System.out.println("request:"+request);
		//System.out.println("movilizerURL:"+movilizerURL);
		//System.out.println("movilizerVersion:"+movilizerVersion);
		
		jaxbDAO = new JaxbDAOMovilizerImpl();
		
		//jaxbDAO.parseXML(request);
		
		
		//System.out.println("request: "+request);
		
		SoapClient soapClient = jaxbDAO.createWebServiceDispatcher(movilizerURL,movilizerVersion);
		

		MovilizerResponse response = (MovilizerResponse) soapClient.call(jaxbDAO.parseXML(request));

		responseXML= jaxbDAO.generateXML(response);
		//System.out.println("RESPONSE:"+responseXML);
		
		
		returnObjects.add(request);
		returnObjects.add(responseXML);
		
		return returnObjects;
		
		
	}
	
	public static void linkNamePrint(Object outC)

	{
		//System.out.println(outC);
	}
	
	public static MovilizerGenericDataContainerEntry createMovilizerGenericDataContainerEntry() {
		
		MovilizerGenericDataContainerEntry parentOuter = new MovilizerGenericDataContainerEntry();
		
		return parentOuter;
	}

	public static MovilizerGenericDataContainer createMovilizerGenericDataContainerObject()

	{

		MovilizerGenericDataContainer data = new MovilizerGenericDataContainer();

		return data;

	}
	
	public static void clearhmITM(){
		hmITM.clear();
		
	}

	public static MovilizerGenericDataContainerEntry createMovilizerGenericDataContainerEntryObject()

	{

		MovilizerGenericDataContainerEntry entry = new MovilizerGenericDataContainerEntry();

		return entry;

	}

	public static MovilizerRequest createMovilizerRequestObject()

	{

		MovilizerRequest movilizerRequest = new MovilizerRequest();

		return movilizerRequest;
	}

	public static MovilizerRequestBuilder createMovilizerRequestBuilderObject()

	{
		MovilizerRequestBuilder requestBuilder = new MovilizerRequestBuilder(
				movilizerRequest);

		return requestBuilder;
	}

	public static MovilizerMasterdataPoolUpdate createMovilizerMasterdataPoolUpdateObject()

	{
		MovilizerMasterdataPoolUpdate masterdataPoolUpdate = new MovilizerMasterdataPoolUpdate();

		return masterdataPoolUpdate;
	}

	public static MovilizerMasterdataUpdate createMovilizerMasterdataUpdateObject()

	{

		MovilizerMasterdataUpdate masterdataUpdate = new MovilizerMasterdataUpdate();

		return masterdataUpdate;
	}
	
	private static MovilizerMasterdataAttributeUpdate createMovilizerMasterdataAttributeUpdateObject() {
		MovilizerMasterdataAttributeUpdate masterdataAttributeUpdate = new MovilizerMasterdataAttributeUpdate();

		return masterdataAttributeUpdate;
		
	}

	public static MovilizerAttributeEntry createMovilizerAttributeEntryObject(){
		MovilizerAttributeEntry attributeUpdate = new MovilizerAttributeEntry();
		return attributeUpdate;
	}


	public static void extractMetaColumns(Object rowLink) {

		String entryName = "";
		String valstr = "";
		String outerName = "";

		MovilizerGenericDataContainerEntry outer = new MovilizerGenericDataContainerEntry();
		MovilizerGenericDataContainerEntry inner = new MovilizerGenericDataContainerEntry();
		// data = createMovilizerGenericDataContainerObject();

		outerName = rowLink.getClass().getSimpleName().replace("Struct", "");
		// System.out.println(outerName);
		outer.setName(outerName);

		String columnName = null;
		for (java.lang.reflect.Field field : rowLink.getClass()
				.getDeclaredFields()) {
			columnName = field.getName().toLowerCase();
			Object objValue;
			try {
				objValue = field.get(rowLink);

				if (!(columnName.contains("NavExport_Order")||columnName.contains("NavExport_010")))

				{

					entryName = columnName;

					if (objValue == null)
						objValue = "";

					valstr = objValue.toString();

					inner.setName(entryName);
					inner.setValstr(valstr);
					outer.addEntry(inner);
				}

			} catch (IllegalArgumentException e) {
				// TODO Auto-generated catch block
				// e.printStackTrace();
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				// e.printStackTrace();
			}
		}

		data.addEntry(outer);
		//System.out.println(data.getEntryList());

	}

	public static void resetObjects()

	{

		
		//masterdataPoolUpdate = null;
		masterdataUpdate = null;
		data = null;
		jaxbDAO = null;
		//parentOuter = null;
		attributeUpdate=null;
		attributeData = null;
		
	}
	
	
	public static void startServer()
    {
        String ackKey = null;
        while (true)
        {
            //System.out.println("Polling run started.........");
            try
            {
                Thread.sleep(2000L);
            }
            catch (final InterruptedException e1)
            {
                e1.printStackTrace();
            }

            final MovilizerResponse response = new  MovilizerResponse()   ;//fireEmptyRequest(ackKey);
;//fireEmptyRequest(ackKey);

            ackKey = response.getRequestAcknowledgeKey();

            final List<MovilizerUploadDataContainer> containerList = response.getUploadContainerList();
            final long currentTime = System.currentTimeMillis();
            PrintWriter writer;
            final int numResp = 0;

            final List<MovilizerMasterdataAck> mdAckList = response.getMasterdataAckList();

            if (containerList != null)
            {
                for (final MovilizerUploadDataContainer container : containerList)
                {
                    //File file = new File("./responses/containers/Response"+currentTime+"-"+numResp+".xml", "UTF-8");
                    final File file = new File("D:\\Movilizer\\" + currentTime + "-" + numResp + ".xml");
                    //System.out.println("Absolute path:" + file.getAbsolutePath());
                    if (!file.exists())
                    {
                        try
                        {
                            if (file.createNewFile())
                            {
                                writer = new PrintWriter(file);
                                writer.write(jaxbDAO.generateXML(container));
                                writer.close();
                            }
                          //  System.out.println("Wrote container");
                        }
                        catch (final IOException e)
                        {
                            e.printStackTrace();
                            ackKey = null;
                        }
                        catch (final MovilizerJaxbException e)
                        {
                            e.printStackTrace();
                            ackKey = null;
                        }
                    }
                }
            }

            if (mdAckList != null)
            {
                final File file = new File("D:\\Movilizer\\" + currentTime + "-" + numResp + ".txt");
                if (!file.exists())
                {
                    try
                    {
                        if (file.createNewFile())
                        {
                            writer = new PrintWriter(file);
                            for (final MovilizerMasterdataAck ack : mdAckList)
                            {
                                writer.write(ack.getPool() + "-" + ack.getGroup() + "-" + ack.getKey() + "\n");
                            }
                            writer.close();
                        }
                    }
                    catch (final IOException e)
                    {
                        e.printStackTrace();
                    }
                }
                //System.out.println("Wrote ack");
            }
        }
    }
	
	private static MovilizerResponse fireEmptyRequest(String ackKey)
    {
        try
        {
            final MovilizerRequest movilizerRequest = new MovilizerRequest();
            movilizerRequest.setSystemId(SYSTEM_ID);
            movilizerRequest.setSystemPassword(SYSTEM_PASSWORD);
            if (ackKey != null)
            {
                movilizerRequest.setRequestAcknowledgeKey(ackKey);
            }
            movilizerRequest.setNumResponses(new Integer(100));

            final MovilizerRequestBuilder requestBuilder = new MovilizerRequestBuilder(movilizerRequest);

            final MovilizerRequest request = (MovilizerRequest) requestBuilder.getRequestObject();
            //System.out.println(jaxbDAO.generateXML(request));

            final SoapClient soapClient = jaxbDAO.createWebServiceDispatcher("http://demo.movilizer.com/mds/WebService/", 14);
            final MovilizerResponse response = (MovilizerResponse) soapClient.call(request);

            System.out.println("Receiving-->" + jaxbDAO.generateXML(response));

            return response;
        }
        catch (final MovilizerJaxbException e)
        {
            e.printStackTrace();
        }
        catch (final Exception e)
        {
            e.printStackTrace();
        }

        return null;
    }
}
