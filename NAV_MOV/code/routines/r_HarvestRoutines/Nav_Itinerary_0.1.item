package routines;

import java.beans.Introspector;



import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.List;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.PropertyUtils;
import org.jibx.ws.WsException;
import org.jibx.ws.soap.client.SoapClient;

import com.movilitas.builder.MovilizerRequestBuilder;
import com.movilitas.jaxbframework.MovilizerJaxbException;
import com.movilitas.jaxbframework.dataaccess.jaxb.impl.JaxbDAOMovilizerImpl;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerGenericDataContainer;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerGenericDataContainerEntry;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMasterdataAck;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMasterdataPoolUpdate;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMasterdataUpdate;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerRequest;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerResponse;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerUploadDataContainer;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class Nav_Itinerary {

	
	public static JaxbDAOMovilizerImpl jaxbDAO ;
	public static MovilizerGenericDataContainer data = createMovilizerGenericDataContainerObject();
	public static MovilizerRequest movilizerRequest = createMovilizerRequestObject();
	public static MovilizerRequestBuilder requestBuilder = createMovilizerRequestBuilderObject();
	public static MovilizerMasterdataPoolUpdate masterdataPoolUpdate= createMovilizerMasterdataPoolUpdateObject();
	public static MovilizerMasterdataUpdate masterdataUpdate;
	public static MovilizerGenericDataContainerEntry parentOuter;
	public static java.util.HashMap hmRTE_DATE = new java.util.HashMap();

	public static int putRTE_DATEcount(String s){
		int val =1;
		if(!hmRTE_DATE.containsKey(s)){
			hmRTE_DATE.put(s, 1);
		}else{
			hmRTE_DATE.put(s,1+Integer.parseInt(hmRTE_DATE.get(s).toString()));
		}
		return val;
	}
	public static int getRTE_DATEcount(String key){
		if(hmRTE_DATE.get(key)!=null){
		return Integer.parseInt(hmRTE_DATE.get(key).toString());
		}else{return 0;}
	}

	public static void createAllObjects() throws MovilizerJaxbException {
	//	movilizerRequest = createMovilizerRequestObject();
	//	requestBuilder = createMovilizerRequestBuilderObject();
	//	masterdataPoolUpdate = createMovilizerMasterdataPoolUpdateObject();
		masterdataUpdate = createMovilizerMasterdataUpdateObject();
		//data = createMovilizerGenericDataContainerObject();
		jaxbDAO = new JaxbDAOMovilizerImpl();
		
	}

	public static void createData(String sdate){
		data = createMovilizerGenericDataContainerObject();
		MovilizerGenericDataContainerEntry inner = new MovilizerGenericDataContainerEntry();
		inner.setName("DATE");
		inner.setValstr(sdate);
		data.addEntry(inner);
		inner=null;
	}
	
	

	public static void populateMasterdataPoolUpdate(Object rowLink)
			throws MovilizerJaxbException, IllegalArgumentException,
			IllegalAccessException, InvocationTargetException,
			NoSuchMethodException {

		String entryName = "";
		String valstr = "";
		String columnName = null;
		Object objValue;

		movilizerRequest.setSynchronousResponse(true);
		movilizerRequest.setNumResponses(new Integer(1000));
		movilizerRequest.setUseAutoAcknowledge(true);

		for (java.lang.reflect.Field field : rowLink.getClass()
				.getDeclaredFields()) {
			columnName = field.getName();

			if (!(columnName.contains("RmExport_010")||columnName.contains("NavExport_010")))

			{

				objValue = field.get(rowLink);

				entryName = columnName;

				if (objValue == null)
					objValue = "";

				valstr = objValue.toString();
				// System.out.println(entryName +"-"+valstr);

				if (columnName.equalsIgnoreCase("SystemId")
						|| columnName.equalsIgnoreCase("SystemPassword")) {

					BeanUtils.setProperty(movilizerRequest,
							uncapitalize(entryName), objValue);

					// System.out.println("---"+BeanUtils.getProperty(movilizerRequest,uncapitalize(entryName)));

				} else if (columnName.equalsIgnoreCase("Pool")) {
					BeanUtils.setProperty(masterdataPoolUpdate,
							uncapitalize(entryName), objValue);
					// System.out.println("---"+BeanUtils.getProperty(masterdataPoolUpdate,uncapitalize(entryName)));
				}

				

			}

		}

		rowLink = null;

	}
	
	public static void populateMasterdataUpdate(Object rowLink)
			throws MovilizerJaxbException, IllegalArgumentException,
			IllegalAccessException, InvocationTargetException,
			NoSuchMethodException {

		String entryName = "";
		String valstr = "";
		String columnName = null;
		Object objValue;

		

		for (java.lang.reflect.Field field : rowLink.getClass()
				.getDeclaredFields()) {
			columnName = field.getName();

			if (!(columnName.contains("RmExport_010")||columnName.contains("NavExport_010")))

			{

				objValue = field.get(rowLink);

				entryName = columnName;

				if (objValue == null)
					objValue = "";

				valstr = objValue.toString();
				// System.out.println(entryName +"-"+valstr);

				
					BeanUtils.setProperty(masterdataUpdate,
							uncapitalize(entryName), objValue);
					// System.out.println("---"+BeanUtils.getProperty(masterdataUpdate,uncapitalize(entryName)));
				

			}

		}
		
				rowLink = null;

	}

	public static String uncapitalize(String string) {
		return Character.toLowerCase(string.charAt(0)) + string.substring(1);
	}

	
	
	
	
	public static void populateDataContainerEntry(Object rowLink)
			throws IllegalArgumentException, IllegalAccessException {

		String entryName = "";
		String valstr = "";
		String outerName = "";
		String columnName = null;
		
		Object objValue;

		MovilizerGenericDataContainerEntry outer = new MovilizerGenericDataContainerEntry();
		MovilizerGenericDataContainerEntry inner;
		// data = createMovilizerGenericDataContainerObject();

		
		for (java.lang.reflect.Field field : rowLink.getClass()
				.getDeclaredFields()) {
			columnName = field.getName();
			
//System.out.println("F1");
			if (!(columnName.contains("RmExport_010")||columnName.contains("NavExport_010")))

			{

				objValue = field.get(rowLink);
				entryName = columnName;
				
				
				if (objValue == null)
					objValue = "";

				valstr = objValue.toString();

				inner = new MovilizerGenericDataContainerEntry();
				inner.setName(entryName);
				inner.setValstr(valstr);
				outer.addEntry(inner);
				
				//System.out.println("F2");
				
				if (entryName.equalsIgnoreCase("STOPNO"))
					outer.setName(valstr);
				
//				data.addEntry(outer);
				
			}

		}
		if(outer!=null)
		data.addEntry(outer);
	
		//System.out.println(data.getEntryList());
		
		rowLink = null;
		inner = null;
		//outer = null;
	
	}
	
	
	
		
	public static void populateUpdateContainerEntry()
	{
		if (data == null)
		{System.out.println("********** data null , check **************");}
		masterdataUpdate.setData(data);
		data = null;
		if (masterdataUpdate == null)
		{System.out.println("********** masterdataUpdate null , check **************");}
		masterdataPoolUpdate.addUpdate(masterdataUpdate);
	}

	public static String sendMasterData(String movilizerURL, int movilizerVersion) throws MovilizerJaxbException,
			IOException, WsException {

		String responseXML = "";
		

		movilizerRequest.addMasterdataPoolUpdate(masterdataPoolUpdate);

		MovilizerRequest request = (MovilizerRequest) requestBuilder
				.getRequestObject();

		System.out.println(jaxbDAO.generateXML(request));

		SoapClient soapClient = jaxbDAO.createWebServiceDispatcher(
				movilizerURL, movilizerVersion); 
				//"https://epcis-test.movilizer.com/mds/WebService/", 14);  // UAT url
				  //"https://demo.movilizer.com/mds/WebService/", 14);    // demo url
		MovilizerResponse response = (MovilizerResponse) soapClient
				.call(request);
		responseXML = jaxbDAO.generateXML(response).toString();
		//System.out.println(responseXML);
		
		movilizerRequest=null;
		requestBuilder=null;
		masterdataPoolUpdate=null;
		
		movilizerRequest = createMovilizerRequestObject();
		requestBuilder = createMovilizerRequestBuilderObject();
		masterdataPoolUpdate= createMovilizerMasterdataPoolUpdateObject();
		
		return responseXML; 
		
	}
	
	public static void linkNamePrint(Object outC)

	{
		System.out.println(outC);
	}
	
	public static MovilizerGenericDataContainerEntry createMovilizerGenericDataContainerEntry() {
		
		MovilizerGenericDataContainerEntry parentOuter = new MovilizerGenericDataContainerEntry();
		
		return parentOuter;
	}

	public static MovilizerGenericDataContainer createMovilizerGenericDataContainerObject()

	{

		MovilizerGenericDataContainer data = new MovilizerGenericDataContainer();

		return data;

	}
	

	public static MovilizerGenericDataContainerEntry createMovilizerGenericDataContainerEntryObject()

	{

		MovilizerGenericDataContainerEntry entry = new MovilizerGenericDataContainerEntry();

		return entry;

	}

	public static MovilizerRequest createMovilizerRequestObject()

	{

		MovilizerRequest movilizerRequest = new MovilizerRequest();

		return movilizerRequest;
	}

	public static MovilizerRequestBuilder createMovilizerRequestBuilderObject()

	{
		MovilizerRequestBuilder requestBuilder = new MovilizerRequestBuilder(
				movilizerRequest);

		return requestBuilder;
	}

	public static MovilizerMasterdataPoolUpdate createMovilizerMasterdataPoolUpdateObject()

	{
		MovilizerMasterdataPoolUpdate masterdataPoolUpdate = new MovilizerMasterdataPoolUpdate();

		return masterdataPoolUpdate;
	}

	public static MovilizerMasterdataUpdate createMovilizerMasterdataUpdateObject()

	{

		MovilizerMasterdataUpdate masterdataUpdate = new MovilizerMasterdataUpdate();

		return masterdataUpdate;
	}

	public static void extractMetaColumns(Object rowLink) {

		String entryName = "";
		String valstr = "";
		String outerName = "";

		MovilizerGenericDataContainerEntry outer = new MovilizerGenericDataContainerEntry();
		MovilizerGenericDataContainerEntry inner = new MovilizerGenericDataContainerEntry();
		// data = createMovilizerGenericDataContainerObject();

		outerName = rowLink.getClass().getSimpleName().replace("Struct", "");
		// System.out.println(outerName);
		outer.setName(outerName);

		String columnName = null;
		for (java.lang.reflect.Field field : rowLink.getClass()
				.getDeclaredFields()) {
			columnName = field.getName().toLowerCase();
			Object objValue;
			try {
				objValue = field.get(rowLink);

				if (!(columnName.contains("RmExport_010")||columnName.contains("NavExport_010")))

				{

					entryName = columnName;

					if (objValue == null)
						objValue = "";

					valstr = objValue.toString();

					inner.setName(entryName);
					inner.setValstr(valstr);
					outer.addEntry(inner);
				}

			} catch (IllegalArgumentException e) {
				// TODO Auto-generated catch block
				// e.printStackTrace();
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				// e.printStackTrace();
			}
		}

		data.addEntry(outer);
		System.out.println(data.getEntryList());

	}

	public static void resetObjects()

	{

		
		//masterdataPoolUpdate = null;
		masterdataUpdate = null;
		//data = null;
		jaxbDAO = null;
		parentOuter = null;
	}
		
}
