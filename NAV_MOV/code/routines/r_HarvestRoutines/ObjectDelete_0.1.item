package routines;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import org.apache.commons.beanutils.BeanUtils;
import org.jibx.ws.WsException;
import org.jibx.ws.soap.client.SoapClient;

import com.movilitas.builder.MovilizerRequestBuilder;
import com.movilitas.jaxbframework.MovilizerJaxbException;
import com.movilitas.jaxbframework.dataaccess.jaxb.impl.JaxbDAOMovilizerImpl;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MoveletConstants;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MoveletType;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerAnswer;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerAttributeEntry;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerGenericDataContainer;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerGenericDataContainerEntry;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMasterdataAck;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMasterdataAttributeUpdate;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMasterdataDelete;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMasterdataPoolUpdate;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMasterdataUpdate;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMovelet;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerMoveletSet;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerParticipant;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerQuestion;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerRequest;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerResponse;
import com.movilitas.jaxbframework.dataaccess.jaxb.v14.MovilizerUploadDataContainer;
import com.movilitas.sync.SyncConstants;



/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class ObjectDelete {

	public static int SYSTEM_ID = 51840021;
	public static String SYSTEM_PASSWORD = "peterson";
	public static JaxbDAOMovilizerImpl jaxbDAO ;
	public static MovilizerGenericDataContainer data;
	public static MovilizerGenericDataContainer attributeData;
	public static MovilizerRequest movilizerRequest = createMovilizerRequestObject();
	public static MovilizerRequestBuilder requestBuilder = createMovilizerRequestBuilderObject();
	public static MovilizerMasterdataPoolUpdate masterdataPoolUpdate= createMovilizerMasterdataPoolUpdateObject();
	public static MovilizerMasterdataPoolUpdate masterdataPoolUpdate2= createMovilizerMasterdataPoolUpdateObject();
	public static MovilizerMasterdataAttributeUpdate masterdataAttributeUpdate= createMovilizerMasterdataAttributeUpdateObject();
	public static MovilizerMasterdataUpdate masterdataUpdate;
	public static MovilizerMasterdataDelete masterdataDelete;
	public static MovilizerAttributeEntry attributeUpdate;
	public static MovilizerGenericDataContainerEntry parentOuter;	
	
	

	
	

	
	

	public static void createAllObjects() throws MovilizerJaxbException {
	
		masterdataUpdate = createMovilizerMasterdataUpdateObject();
		masterdataDelete = createMovilizerMasterdataDeleteObject();
		masterdataAttributeUpdate = createMovilizerMasterdataAttributeUpdateObject();
		attributeUpdate= createMovilizerAttributeEntryObject();
		data = createMovilizerGenericDataContainerObject();
		jaxbDAO = new JaxbDAOMovilizerImpl();
		parentOuter = createMovilizerGenericDataContainerEntry();
		
	}
	
	
	

	public static void populateMasterdataPoolUpdate2(Object rowLink)
			throws MovilizerJaxbException, IllegalArgumentException,
			IllegalAccessException, InvocationTargetException,
			NoSuchMethodException {

		String entryName = "";
		String valstr = "";
		String columnName = null;
		Object objValue;

		movilizerRequest.setSynchronousResponse(true);
		movilizerRequest.setNumResponses(new Integer(100));

		for (java.lang.reflect.Field field : rowLink.getClass()
				.getDeclaredFields()) {
			columnName = field.getName();

			if (!(columnName.contains("Commons_010")||columnName.contains("Commons_010")))

			{

				objValue = field.get(rowLink);

				entryName = columnName;

				if (objValue == null)
					objValue = "";

				valstr = objValue.toString();
				// System.out.println(entryName +"-"+valstr);

				if (columnName.equalsIgnoreCase("SystemId")
						|| columnName.equalsIgnoreCase("SystemPassword")) {

					BeanUtils.setProperty(movilizerRequest,
							uncapitalize(entryName), objValue);

					// System.out.println("---"+BeanUtils.getProperty(movilizerRequest,uncapitalize(entryName)));

				} else if (columnName.equalsIgnoreCase("Pool")) {
					BeanUtils.setProperty(masterdataPoolUpdate2,
							uncapitalize(entryName), objValue);
					// System.out.println("---"+BeanUtils.getProperty(masterdataPoolUpdate,uncapitalize(entryName)));
				}

				

			}

		}
		
		rowLink = null;

	}
	
	
	

	
	
	
	
	public static void populateMasterdataDelete(Object rowLink)
			throws MovilizerJaxbException, IllegalArgumentException,
			IllegalAccessException, InvocationTargetException,
			NoSuchMethodException {

		String entryName = "";
		String valstr = "";
		String columnName = null;
		Object objValue;

		

		for (java.lang.reflect.Field field : rowLink.getClass()
				.getDeclaredFields()) {
			columnName = field.getName();

			if (!(columnName.contains("Commons_010")||columnName.contains("Commons_010")))

			{

				objValue = field.get(rowLink);

				entryName = columnName;

				if (objValue == null)
					objValue = "";

				valstr = objValue.toString();
				// System.out.println(entryName +"-"+valstr);

				
					//BeanUtils.setProperty(masterdataDelete,
					//		uncapitalize(entryName), objValue);
					// System.out.println("---"+BeanUtils.getProperty(masterdataUpdate,uncapitalize(entryName)));
				

			}

		}

		rowLink = null;

	}
	

	public static String uncapitalize(String string) {
		return Character.toLowerCase(string.charAt(0)) + string.substring(1);
	}
	
	
	
	
	
	public static void populateUpdateContainerEntry()
	{
		
	
		
		masterdataPoolUpdate2.addDelete(masterdataDelete);
	}
	
	public static String sendMasterData(String movilizerURL, int movilizerVersion) throws MovilizerJaxbException,
			IOException, WsException {

		String responseXML = "";
		//System.out.println(masterdataPoolUpdate.getPool());
		
		movilizerRequest.addMasterdataPoolUpdate(masterdataPoolUpdate2);
		
	
		
		MovilizerRequest request = (MovilizerRequest) requestBuilder
				.getRequestObject();
		
		jaxbDAO.generateXML(request).replace("<delete key=\"Dummy\"/>", "<delete/>");

		System.out.println(jaxbDAO.generateXML(request).replace("<delete key=\"Dummy\"/>", "<delete/>"));

		SoapClient soapClient = jaxbDAO.createWebServiceDispatcher(
				movilizerURL, movilizerVersion);  // UAT url
				 // "https://demo.movilizer.com/mds/WebService/", 14);    // demo url
		MovilizerResponse response = (MovilizerResponse) soapClient
				.call(request);
		responseXML =jaxbDAO.generateXML(response);
		//System.out.println(responseXML);
		
		movilizerRequest=null;
		requestBuilder=null;
		masterdataPoolUpdate=null;
		masterdataPoolUpdate2=null;
		masterdataAttributeUpdate = null;
		parentOuter = null;
		
		movilizerRequest = createMovilizerRequestObject();
		requestBuilder = createMovilizerRequestBuilderObject();
		masterdataPoolUpdate= createMovilizerMasterdataPoolUpdateObject();
		masterdataPoolUpdate2= createMovilizerMasterdataPoolUpdateObject();
		
		return responseXML;
		
		

	}
	
	

	public static void linkNamePrint(Object outC)

	{
		//System.out.println(outC);
	}
	
	public static MovilizerGenericDataContainerEntry createMovilizerGenericDataContainerEntry() {
		
		MovilizerGenericDataContainerEntry parentOuter = new MovilizerGenericDataContainerEntry();
		
		return parentOuter;
	}

	public static MovilizerGenericDataContainer createMovilizerGenericDataContainerObject()

	{

		MovilizerGenericDataContainer data = new MovilizerGenericDataContainer();

		return data;

	}
	

	public static MovilizerGenericDataContainerEntry createMovilizerGenericDataContainerEntryObject()

	{

		MovilizerGenericDataContainerEntry entry = new MovilizerGenericDataContainerEntry();

		return entry;

	}

	public static MovilizerRequest createMovilizerRequestObject()

	{

		MovilizerRequest movilizerRequest = new MovilizerRequest();

		return movilizerRequest;
	}

	public static MovilizerRequestBuilder createMovilizerRequestBuilderObject()

	{
		MovilizerRequestBuilder requestBuilder = new MovilizerRequestBuilder(
				movilizerRequest);

		return requestBuilder;
	}

	public static MovilizerMasterdataPoolUpdate createMovilizerMasterdataPoolUpdateObject()

	{
		MovilizerMasterdataPoolUpdate masterdataPoolUpdate = new MovilizerMasterdataPoolUpdate();

		return masterdataPoolUpdate;
	}
	
	private static MovilizerMasterdataAttributeUpdate createMovilizerMasterdataAttributeUpdateObject() {
		MovilizerMasterdataAttributeUpdate masterdataAttributeUpdate = new MovilizerMasterdataAttributeUpdate();

		return masterdataAttributeUpdate;
		
	}

	public static MovilizerMasterdataUpdate createMovilizerMasterdataUpdateObject()

	{

		MovilizerMasterdataUpdate masterdataUpdate = new MovilizerMasterdataUpdate();

		return masterdataUpdate;
	}
	
	public static MovilizerMasterdataDelete createMovilizerMasterdataDeleteObject()

	{

		MovilizerMasterdataDelete masterdataDelete = new MovilizerMasterdataDelete();

		return masterdataDelete;
	}
	
	public static MovilizerAttributeEntry createMovilizerAttributeEntryObject(){
		MovilizerAttributeEntry attributeUpdate = new MovilizerAttributeEntry();
		return attributeUpdate;
	}

	public static void extractMetaColumns(Object rowLink) {

		String entryName = "";
		String valstr = "";
		String outerName = "";

		MovilizerGenericDataContainerEntry outer = new MovilizerGenericDataContainerEntry();
		MovilizerGenericDataContainerEntry inner = new MovilizerGenericDataContainerEntry();
		// data = createMovilizerGenericDataContainerObject();

		outerName = rowLink.getClass().getSimpleName().replace("Struct", "");
		// System.out.println(outerName);
		outer.setName(outerName);

		String columnName = null;
		for (java.lang.reflect.Field field : rowLink.getClass()
				.getDeclaredFields()) {
			columnName = field.getName().toLowerCase();
			Object objValue;
			try {
				objValue = field.get(rowLink);

				if (!(columnName.contains("Commons_010")||columnName.contains("Commons_010")))

				{

					entryName = columnName;

					if (objValue == null)
						objValue = "";

					valstr = objValue.toString();

					inner.setName(entryName);
					inner.setValstr(valstr);
					outer.addEntry(inner);
				}

			} catch (IllegalArgumentException e) {
				// TODO Auto-generated catch block
				// e.printStackTrace();
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				// e.printStackTrace();
			}
		}

		data.addEntry(outer);
		data.getEntryList();

	}

	public static void resetObjects()

	{

		
		//masterdataPoolUpdate = null;
		masterdataUpdate = null;
		data = null;
		jaxbDAO = null;
		parentOuter = null;
		attributeUpdate=null;
		attributeData = null;
	}
	public static void resetObjects_NotData()

	{

		
		//masterdataPoolUpdate = null;
		masterdataUpdate = null;
//		data = null;
		jaxbDAO = null;
		parentOuter = null;
		attributeUpdate=null;
		attributeData = null;
	}	
	/////////////////////////////original
	/*
	public static void startServer()
    {
        String ackKey = null;
        while (true)
        {
            System.out.println("Polling run started.........");
            try
            {
                Thread.sleep(2000L);
            }
            catch (final InterruptedException e1)
            {
                e1.printStackTrace();
            }

            final MovilizerResponse response = fireEmptyRequest(ackKey);//new  MovilizerResponse()   ;//fireEmptyRequest(ackKey);

            ackKey = response.getRequestAcknowledgeKey();
            System.out.println("ack Key"+ackKey);
            final List<MovilizerUploadDataContainer> containerList = response.getUploadContainerList();
            final long currentTime = System.currentTimeMillis();
            PrintWriter writer;
            final int numResp = 0;

            final List<MovilizerMasterdataAck> mdAckList = response.getMasterdataAckList();

            if (containerList != null)
            {
                for (final MovilizerUploadDataContainer container : containerList)
                {
                    //File file = new File("./responses/containers/Response"+currentTime+"-"+numResp+".xml", "UTF-8");
                    //final File file = new File("D:\\Movilizer\\" + currentTime + "-" + numResp + ".xml");
                	System.out.println("Show_Name "+container.getContainer().getData().getEntry(0).getName());
                	final File file = new File("D:\\Movilizer\\" + currentTime + "-" + numResp + ".xml");
                    System.out.println("Absolute path:" + file.getAbsolutePath());
                    if (!file.exists())
                    {
                        try
                        {
                            if (file.createNewFile())
                            {
                                writer = new PrintWriter(file);
                                writer.write(jaxbDAO.generateXML(container));
                                writer.close();
                            }
                            System.out.println("Wrote container");
                        }
                        catch (final IOException e)
                        {
                            e.printStackTrace();
                            ackKey = null;
                        }
                        catch (final MovilizerJaxbException e)
                        {
                            e.printStackTrace();
                            ackKey = null;
                        }
                    }
                }
            }
            else{ System.out.println("Container is null");}

            if (mdAckList != null)
            {
                final File file = new File("D:\\Movilizer\\" + currentTime + "-" + numResp + ".txt");
                if (!file.exists())
                {
                    try
                    {
                        if (file.createNewFile())
                        {
                            writer = new PrintWriter(file);
                            for (final MovilizerMasterdataAck ack : mdAckList)
                            {
                                writer.write(ack.getPool() + "-" + ack.getGroup() + "-" + ack.getKey() + "\n");
                            }
                            writer.close();
                        }
                    }
                    catch (final IOException e)
                    {
                        e.printStackTrace();
                    }
                }
                System.out.println("Wrote ack");
            }
            else{System.out.println("mdAckList is null");}
            
        }
    }
	
	private static MovilizerResponse fireEmptyRequest(String ackKey)
    {
        try
        {
            final MovilizerRequest movilizerRequest = new MovilizerRequest();
            movilizerRequest.setSystemId(SYSTEM_ID);
            movilizerRequest.setSystemPassword(SYSTEM_PASSWORD);
            if (ackKey != null)
            {
                movilizerRequest.setRequestAcknowledgeKey(ackKey);
            }
            movilizerRequest.setNumResponses(new Integer(100));

            final MovilizerRequestBuilder requestBuilder = new MovilizerRequestBuilder(movilizerRequest);

            final MovilizerRequest request = (MovilizerRequest) requestBuilder.getRequestObject();
            System.out.println(jaxbDAO.generateXML(request));

            final SoapClient soapClient = jaxbDAO.createWebServiceDispatcher("http://demo.movilizer.com/mds/WebService/", 14);
            final MovilizerResponse response = (MovilizerResponse) soapClient.call(request);

            System.out.println("Receiving-->" + jaxbDAO.generateXML(response));

            return response;
        }
        catch (final MovilizerJaxbException e)
        {
            e.printStackTrace();
        }
        catch (final Exception e)
        {
            e.printStackTrace();
        }

        return null;
    }
	*/
	///////////////////////////////////////Duplicate

    public static void startServer()
    {
        String ackKey = null;
        while (true)
        {
            System.out.println("Polling run started.........");
            try
            {
                Thread.sleep(2000L);
            }
            catch (final InterruptedException e1)
            {
                e1.printStackTrace();
            }

            final MovilizerResponse response = fireEmptyRequest(ackKey);

            ackKey = response.getRequestAcknowledgeKey();

            final List<MovilizerUploadDataContainer> containerList = response.getUploadContainerList();
            final long currentTime = System.currentTimeMillis();
            PrintWriter writer;
            final int numResp = 0;

            final List<MovilizerMasterdataAck> mdAckList = response.getMasterdataAckList();

            if (containerList != null)
            {
                for (final MovilizerUploadDataContainer container : containerList)
                {
                    //File file = new File("./responses/containers/Response"+currentTime+"-"+numResp+".xml", "UTF-8");
                    final File file = new File("C:\\MovilizerResponse\\" + currentTime + "-" + numResp + ".xml");
                   // System.out.println("Absolute path:" + file.getAbsolutePath());
                    if (!file.exists())
                    {
                        try
                        {
                            if (file.createNewFile())
                            {
                                writer = new PrintWriter(file);
                                writer.write(jaxbDAO.generateXML(container));
                                writer.close();
                            }
                            //System.out.println("Wrote container");
                        }
                        catch (final IOException e)
                        {
                            e.printStackTrace();
                            ackKey = null;
                        }
                        catch (final MovilizerJaxbException e)
                        {
                            e.printStackTrace();
                            ackKey = null;
                        }
                    }
                }
            }

            if (mdAckList != null)
            {
                final File file = new File("C:\\MovilizerResponse\\" + currentTime + "-" + numResp + ".txt");
                if (!file.exists())
                {
                    try
                    {
                        if (file.createNewFile())
                        {
                            writer = new PrintWriter(file);
                            for (final MovilizerMasterdataAck ack : mdAckList)
                            {
                                writer.write(ack.getPool() + "-" + ack.getGroup() + "-" + ack.getKey() + "\n");
                            }
                            writer.close();
                        }
                    }
                    catch (final IOException e)
                    {
                        e.printStackTrace();
                    }
                }
               // System.out.println("Wrote ack");
            }
        }
    }

    private static MovilizerResponse fireEmptyRequest(String ackKey)
    {
        try
        {
            final MovilizerRequest movilizerRequest = new MovilizerRequest();
            movilizerRequest.setSystemId(SYSTEM_ID);
            movilizerRequest.setSystemPassword(SYSTEM_PASSWORD);
            if (ackKey != null)
            {
                movilizerRequest.setRequestAcknowledgeKey(ackKey);
            }
            movilizerRequest.setNumResponses(new Integer(100));
            final MovilizerRequestBuilder requestBuilder = new MovilizerRequestBuilder(movilizerRequest);

            final MovilizerRequest request = (MovilizerRequest) requestBuilder.getRequestObject();
           // System.out.println(jaxbDAO.generateXML(request));

            final SoapClient soapClient = jaxbDAO.createWebServiceDispatcher("http://dsd-test.movilizer.com/", 14);
            final MovilizerResponse response = (MovilizerResponse) soapClient.call(request);

        //    System.out.println("Receiving-->" + jaxbDAO.generateXML(response));

            return response;
        }
        catch (final MovilizerJaxbException e)
        {
            e.printStackTrace();
        }
        catch (final Exception e)
        {
            e.printStackTrace();
        }

        return null;
    }


    public static void sendMovelet()
    {
        try
        {
            final JaxbDAOMovilizerImpl jaxbDAO = new JaxbDAOMovilizerImpl();//("http://movilitas.com/movilizer/v14");

            final MovilizerRequest movilizerRequest = new MovilizerRequest();
            movilizerRequest.setSystemId(SYSTEM_ID);
            movilizerRequest.setSystemPassword(SYSTEM_PASSWORD);
            movilizerRequest.setSynchronousResponse(true);
            movilizerRequest.setNumResponses(new Integer(100));

            final MovilizerRequestBuilder requestBuilder = new MovilizerRequestBuilder(movilizerRequest);

            final MovilizerMoveletSet moveletSet = new MovilizerMoveletSet();
            
            final MoveletType moveletType = MoveletType.SINGLE;

            final MovilizerMovelet movelet = new MovilizerMovelet();
            movelet.setMoveletKey("MyMoveletKey");
            movelet.setMoveletType(moveletType);
            movelet.setName("MyMovelet");
            movelet.setInitialQuestionKey("Q1");;

            final MovilizerQuestion question = new MovilizerQuestion();
            movelet.addQuestion(question);
            question.setKey("Q1");
            question.setType(SyncConstants.QTYPE_MESSAGE);
            question.setTitle("MyMessageScreen");

            final MovilizerAnswer answer = new MovilizerAnswer();
            question.addAnswer(answer);
            answer.setKey("Q1_A1");
            answer.setText("MyMessage");
            answer.setNextQuestionKey(MoveletConstants.QNUM_END);

            final MovilizerParticipant participant = new MovilizerParticipant();
            participant.setDeviceAddress("@ulf@movilizer.com");
            participant.setParticipantKey("");
            participant.setName("ulf");

            moveletSet.addMovelet(movelet);
            moveletSet.addParticipant(participant);
            movilizerRequest.addMoveletSet(moveletSet);

            final MovilizerRequest request = (MovilizerRequest) requestBuilder.getRequestObject();
            //System.out.println(jaxbDAO.generateXML(request));

            final SoapClient soapClient = jaxbDAO.createWebServiceDispatcher("http://dsd-test.movilizer.com/", 14);//"https://d.movilizer.com/mds/WebService/", 14);
            final MovilizerResponse response = (MovilizerResponse) soapClient.call(request);
            //System.out.println(jaxbDAO.generateXML(response));
        }
        catch (final MovilizerJaxbException e)
        {
            e.printStackTrace();
        }
        catch (final Exception e)
        {
            e.printStackTrace();
        }
    }
//
//    private static void deleteMovelet()
//    {
//        try
//        {
//            final JaxbDAOMovilizerImpl jaxbDAO = new JaxbDAOMovilizerImpl("http://d.movilitas.com/movilizer/v14");
//
//            final MovilizerRequest movilizerRequest = new MovilizerRequest();
//            movilizerRequest.setSystemId(SYSTEM_ID);
//            movilizerRequest.setSystemPassword(SYSTEM_PASSWORD);
//            movilizerRequest.setSynchronousResponse(true);
//            movilizerRequest.setNumResponses(new Integer(100));
//
//            final MovilizerMoveletDelete moveletDelete = new MovilizerMoveletDelete();
//            moveletDelete.setMoveletKey("MyMoveletKey");
//
//            movilizerRequest.addMoveletDelete(moveletDelete);
//
//            final MovilizerWebServiceV14 movilizerWebServiceV14 = getMovilizerWebServiceV14();
//            final MovilizerResponse response = movilizerWebServiceV14.movilizer(movilizerRequest);
//            System.out.println(jaxbDAO.generateXML(response));
//        }
//        catch (final MovilizerJaxbException e)
//        {
//            e.printStackTrace();
//        }
//        catch (final Exception e)
//        {
//            e.printStackTrace();
//        }
//    }
//
//    private static MovilizerWebServiceV14 getMovilizerWebServiceV14() throws Exception
//    {
//        final String wsdlLocation = new File(".").getCanonicalPath().concat(File.separator).concat("res").concat(File.separator).concat("V14DEMO.wsdl");
//
//        return new MovilizerWebServiceV14Service(new URL("file://" + wsdlLocation)).getMovilizerWebServiceV14Soap11();
//
//    }

	
}
